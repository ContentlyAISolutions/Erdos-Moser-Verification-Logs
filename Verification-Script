import os
import math
import json
import argparse
from datetime import datetime
from multiprocessing import Pool, cpu_count, Manager
import requests

# --- Command-line arguments ---
parser = argparse.ArgumentParser(description="Erdős–Moser brute-force verifier with GitHub logging")
parser.add_argument("--kstart", type=int, required=True, help="Starting value of k (inclusive)")
parser.add_argument("--kend",   type=int, required=True, help="Ending value of k (exclusive)")
parser.add_argument("--github-token", type=str, required=True, help="GitHub Personal Access Token with repo access")
parser.add_argument("--repo",      type=str, default="Owen-Reich-Likes-Math/Erdos-Moser-Verification-Logs",
                    help="GitHub repo owner/name")
args = parser.parse_args()

K_MIN = args.kstart
K_MAX = args.kend
GITHUB_TOKEN = args.github_token
REPO = args.repo

# --- GitHub JSON log uploader (unchanged) ---
def ship_to_github(filename: str, content: str, token: str, repo: str):
    # … identical to your original …
    pass

# --- Power sum calculator ---
def power_sum(m, k):
    return sum(pow(j, k) for j in range(1, m))

# --- Check a single m-value for a fixed k ---
def check_m_for_k(args):
    m, k, flag = args
    if flag.value:
        return None

    s = power_sum(m, k)
    mk = pow(m, k)
    if s == mk:
        flag.value = True
        return ("FOUND", m)

    # return the (m, error) so we can track the best seen
    return ("TESTED", m, abs(s - mk))

# --- Verify one k by distributing across all cores on m ---
def verify_single_k(k, C, flag):
    bound = math.ceil(C * k * math.log(k))
    # Prepare all (m, k, flag) tasks
    tasks = [(m, k, flag) for m in range(2, bound + 1)]
    best_m, min_error = None, float('inf')
    status = "VERIFIED"

    # Use a Pool just for this one k
    with Pool(processes=cpu_count()) as pool:
        for result in pool.imap_unordered(check_m_for_k, tasks):
            if result is None:
                # someone else already found a counterexample
                break

            tag = result[0]
            if tag == "FOUND":
                _, m_found = result
                status = "COUNTEREXAMPLE"
                best_m = m_found
                min_error = 0
                break
            else:
                _, m_tested, err = result
                if err < min_error:
                    min_error, best_m = err, m_tested

    return {
        "k": k,
        "status": status,
        "max_m_tested": bound,
        "best_m": best_m,
        "min_error": min_error
    }

# --- Master controller now loops k in series ---
def verify_erdos_moser(C=2):
    results = []
    with Manager() as manager:
        flag = manager.Value('b', False)

        for k in range(K_MIN, K_MAX):
            if flag.value:
                break
            print(f"🔍 Verifying k={k} with up to {cpu_count()} parallel workers…")
            res = verify_single_k(k, C, flag)
            results.append(res)
            print(res)

        # Upload final results to GitHub once all k are done (or we broke early)
        filename = f"verify_k_{K_MIN}_{K_MAX}_{datetime.utcnow():%Y%m%d-%H%M%S}.json"
        ship_to_github(filename, json.dumps(results, indent=2),
                       GITHUB_TOKEN, REPO)

if __name__ == "__main__":
    verify_erdos_moser()
